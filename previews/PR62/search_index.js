var documenterSearchIndex = {"docs":
[{"location":"benchmark-core.html#Core-benchmark","page":"Core benchmark","title":"Core benchmark","text":"","category":"section"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"This page displays the core benchmark results from docs/src/assets/benchmark-core/data.json.","category":"page"},{"location":"benchmark-core.html#Benchmark-environment","page":"Core benchmark","title":"Benchmark environment","text":"","category":"section"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"<details style=\"margin-bottom: 1em;\"><summary>📋 Basic metadata</summary>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"function _basic_metadata()\n    if bench_data !== nothing\n        meta = get(bench_data, \"metadata\", Dict())\n        println(\"╔═══════════════════════════════════════════════════════════╗\")\n        println(\"║                   BENCHMARK METADATA                      ║\")\n        println(\"╠═══════════════════════════════════════════════════════════╣\")\n        for (label, key) in (\n            (\"📅 Timestamp\", \"timestamp\"),\n            (\"🔧 Julia version\", \"julia_version\"),\n            (\"💻 OS\", \"os\"),\n            (\"🖥️ Machine\", \"machine\"),\n        )\n            value = string(get(meta, key, \"n/a\"))\n            println(\"  \", rpad(label, key==\"machine\" ? 16 : 17), \": \", rpad(value, 39))\n        end\n        println(\"╚═══════════════════════════════════════════════════════════╝\")\n    else\n        println(\"⚠️  No benchmark data available\")\n    end\nend\nnothing # hide","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"</details>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"_basic_metadata() # hide","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"using TOML\nusing Markdown\n\n# Benchmark directory name\nBENCH_DIR = \"benchmark-core\"\n\n# Read package metadata\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\n\n# Build download links using joinpath for correct path construction\nbase_url = \"https://github.com/control-toolbox/\" * name * \".jl/tree/gh-pages/v\" * version\nlink_manifest = joinpath(base_url, \"assets\", BENCH_DIR, \"Manifest.toml\")\nlink_project = joinpath(base_url, \"assets\", BENCH_DIR, \"Project.toml\")\n\nMarkdown.parse(\"\"\"\nYou can download the exact environment used for this benchmark:\n- 📦 [Project.toml]($link_project) - Package dependencies\n- 📋 [Manifest.toml]($link_manifest) - Complete dependency tree with versions\n\nThese files allow you to reproduce the benchmark environment exactly.\nMore infos below.\n\"\"\")","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"<details style=\"margin-bottom: 0.5em;\"><summary>📦 Package status</summary>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"function _package_status()\n    if bench_data !== nothing\n        meta = get(bench_data, \"metadata\", Dict())\n        pkg_status = get(meta, \"pkg_status\", \"No package status available\")\n        println(_ansi_to_html(pkg_status))\n    else\n        println(\"⚠️  No benchmark data available\")\n    end\nend\n_package_status()","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"</details>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"<details style=\"margin-bottom: 0.5em;\"><summary>ℹ️ Version info</summary>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"function _bench_data()\n    if bench_data !== nothing\n        meta = get(bench_data, \"metadata\", Dict())\n        versioninfo_text = get(meta, \"versioninfo\", \"No version info available\")\n        println(_ansi_to_html(versioninfo_text))\n    else\n        println(\"⚠️  No benchmark data available\")\n    end\nend\n_bench_data()","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"</details>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"<details style=\"margin-bottom: 0.5em;\"><summary>📚 Complete manifest</summary>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"function _complete_manifest()\n    if bench_data !== nothing\n        meta = get(bench_data, \"metadata\", Dict())\n        pkg_manifest = get(meta, \"pkg_manifest\", \"No manifest available\")\n        println(_ansi_to_html(pkg_manifest))\n    else\n        println(\"⚠️  No benchmark data available\")\n    end\nend\n_complete_manifest()","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"</details>","category":"page"},{"location":"benchmark-core.html#Results","page":"Core benchmark","title":"Results","text":"","category":"section"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"<details><summary>Click to unfold the results rendering code.</summary>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"function _print_results(bench_data)\n    if bench_data === nothing\n        println(\"⚠️  No results to display because the benchmark file is missing.\")\n    else\n        rows = get(bench_data, \"results\", Any[])\n        if isempty(rows)\n            println(\"⚠️  No results recorded in the benchmark file.\")\n        else\n            println(\"Benchmarks results:\")\n\n            # Convert to DataFrame for easier manipulation\n            df = DataFrame(rows)\n            \n            # Group by problem for structured display\n            problems = unique(df.problem)\n            \n            for problem in problems\n                println(\"\\n┌─ problem: $problem\")\n                println(\"│\")\n                \n                # Get all rows for this problem\n                prob_df = filter(row -> row.problem == problem, df)\n                \n                # Group by solver and disc_method\n                solver_disc_combos = unique([(row.solver, row.disc_method) for row in eachrow(prob_df)])\n                \n                for (idx, (solver, disc_method)) in enumerate(solver_disc_combos)\n                    is_last = (idx == length(solver_disc_combos))\n                    \n                    println(\"├──┬ solver: $solver, disc_method: $disc_method\")\n                    println(\"│  │\")\n                    \n                    # Filter for this solver/disc_method combination\n                    combo_df = filter(row -> row.solver == solver && row.disc_method == disc_method, prob_df)\n                    \n                    # Group by grid size\n                    grid_sizes = unique(combo_df.grid_size)\n                    \n                    for (grid_idx, N) in enumerate(grid_sizes)\n                        println(\"│  │  N     :   $N\")\n                        \n                        # Filter for this grid size\n                        grid_df = filter(row -> row.grid_size == N, combo_df)\n                        \n                        # Display each model with library formatting\n                        for row in eachrow(grid_df)\n                            println(\"│  │\", CTBenchmarks.format_benchmark_line(Symbol(row.model), row.time, row.allocs, row.memory))\n                        end\n                        \n                        # Add spacing between grid sizes\n                        if grid_idx < length(grid_sizes)\n                            println(\"│  │ \")\n                        end\n                    end\n                    \n                    println(\"│  └─\")\n                    \n                    # Add spacing between solver blocks\n                    if !is_last\n                        println(\"│\")\n                    end\n                end\n                \n                println(\"└─\")\n            end\n        end\n    end\nend\nnothing # hide","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"</details></br>","category":"page"},{"location":"benchmark-core.html","page":"Core benchmark","title":"Core benchmark","text":"_print_results(bench_data) # hide\nnothing # hide","category":"page"},{"location":"index.html#CTBenchmarks","page":"Introduction","title":"CTBenchmarks","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Documentation for CTBenchmarks.","category":"page"},{"location":"index.html#Environment-snapshots-(doc-build-environment)","page":"Introduction","title":"Environment snapshots (doc build environment)","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>The documentation of this package was built using these direct dependencies,</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/control-toolbox/\" *\n                name *\n                \".jl/tree/gh-pages/v\" *\n                version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/control-toolbox/\" *\n               name *\n               \".jl/tree/gh-pages/v\" *\n               version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"}]
}

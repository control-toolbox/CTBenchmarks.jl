name: Orchestrate Core Benchmark and Docs

on:
  push:
    branches: [main]
  pull_request:
    types: [labeled, synchronize, opened, reopened]

permissions:
  actions: write
  contents: write
  pull-requests: write

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if benchmark should run
        id: check
        run: |
          echo "🛡️  Guard job: Checking execution conditions..."
          
          EVENT_NAME="${{ github.event_name }}"
          echo "📋 Event type: $EVENT_NAME"
          
          if [[ "$EVENT_NAME" == "push" ]]; then
            # For push events, we already filter by branch in the trigger
            # So if we're here, it's a push to main - always run
            echo "🚀 Push event to main branch detected"
            echo "✅ Push to main - proceeding with benchmark"
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
            # For PR events, check base branch and labels
            LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
            BASE="${{ github.event.pull_request.base.ref }}"

            echo "🎯 Base branch: $BASE"
            echo "🏷️  PR labels: $LABELS"

            if [[ "$BASE" != "main" ]]; then
              echo "❌ Base branch is not 'main' - skipping benchmark"
              echo "should_run=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "✅ Base branch check passed (main)"

            if echo "$LABELS" | grep -q "run benchmark core"; then
              echo "✅ Found 'run benchmark core' label"
              echo "should_run=true" >> $GITHUB_OUTPUT
            elif echo "$LABELS" | grep -q "run benchmarks all"; then
              echo "✅ Found 'run benchmarks all' label"
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Required benchmark labels not found"
              echo "ℹ️  Expected labels: 'run benchmark core' or 'run benchmarks all'"
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Unexpected event type: $EVENT_NAME"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Guard decision summary
        run: |
          echo "🛡️  Guard Job Summary:"
          echo "🎯 Should run benchmarks: ${{ steps.check.outputs.should_run }}"
          
          EVENT_NAME="${{ github.event_name }}"
          
          if [ "${{ steps.check.outputs.should_run }}" == "true" ]; then
            echo "✅ All conditions met - proceeding with benchmark and docs"
            echo "🚀 Next: Benchmark execution will start"
            
            if [[ "$EVENT_NAME" == "push" ]]; then
              echo "📝 Trigger: Push to main branch"
            else
              echo "📝 Trigger: PR with benchmark label"
            fi
          else
            echo "⏭️  Conditions not met - skipping benchmark workflow"
            
            if [[ "$EVENT_NAME" == "pull_request" ]]; then
              echo "💡 To run benchmarks on PRs, ensure:"
              echo "   • PR targets 'main' branch"
              echo "   • PR has 'run benchmark core' or 'run benchmarks all' label"
            else
              echo "💡 Push events only run benchmarks when pushed to 'main'"
            fi
          fi

  benchmarks:
    needs: guard
    if: needs.guard.outputs.should_run == 'true'
    uses: ./.github/workflows/benchmark-core.yml

  docs:
    needs: [guard, benchmarks]
    if: success() && needs.guard.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with latest changes
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes including benchmark results
        run: |
          echo "🔄 Pulling latest changes from branch..."
          git pull origin ${{ github.head_ref || github.ref_name }}
          echo "✅ Latest changes pulled"

      - name: Verify benchmark file exists
        run: |
          echo "🔍 Checking for benchmark results..."
          if [ -f "docs/src/assets/benchmark-core/data.json" ]; then
            echo "✅ Benchmark file found!"
            echo "📏 File size: $(stat -c%s docs/src/assets/benchmark-core/data.json 2>/dev/null || stat -f%z docs/src/assets/benchmark-core/data.json) bytes"
            echo "🔎 File preview:"
            head -5 docs/src/assets/benchmark-core/data.json
          else
            echo "❌ Benchmark file not found at docs/src/assets/benchmark-core/data.json"
            echo "📂 Contents of docs/src/assets/:"
            find docs/src/assets/ -type f 2>/dev/null || echo "Directory not found"
            exit 1
          fi

      - uses: julia-actions/setup-julia@latest
      - uses: julia-actions/julia-buildpkg@latest

      - name: Install dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'

      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
          GKSwstype: 100
        run: |
          julia --project=docs/ -e 'ENV["GKSwstype"]="nul"; include("docs/make.jl")'

  notify-failure:
    needs: [guard, benchmarks, docs]
    if: failure() && needs.guard.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR with failure notification
        uses: actions/github-script@v8
        with:
          script: |
            console.log('🚨 Workflow failure detected - posting notification...');
            
            const prNumber = context.payload.pull_request.number;
            const failedJobs = [];
            
            console.log('📊 Analyzing job results...');
            if (needs.benchmarks.result === 'failure') {
              console.log('❌ Benchmarks job failed');
              failedJobs.push('Benchmarks');
            }
            if (needs.docs.result === 'failure') {
              console.log('❌ Documentation job failed');
              failedJobs.push('Documentation');
            }
            
            console.log(`📝 Failed jobs: ${failedJobs.join(', ')}`);

            const comment = `
            ## ❌ Workflow Failed
            
            The benchmark and documentation workflow encountered failures:
            
            ### Failed Jobs
            ${failedJobs.map(job => `- ❌ ${job}`).join('\n')}
            
            ### 🔍 Troubleshooting
            - Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed logs
            - Verify that all required dependencies are available
            - Ensure the benchmark code is functioning correctly
            
            ### 🔄 Next Steps
            - Fix any issues identified in the logs
            - Push new commits to retry, or
            - Remove and re-add the benchmark label to restart
            
            ---
            *🤖 This notification was automatically generated*
            `;

            console.log('💬 Posting failure comment to PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
            console.log('✅ Failure notification posted successfully');

  notify-success:
    needs: [guard, benchmarks, docs]
    if: success() && needs.guard.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR with success notification
        uses: actions/github-script@v8
        with:
          script: |
            console.log('🎉 Workflow success detected - posting notification...');

            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://control-toolbox.org/CTBenchmarks.jl/previews/PR${prNumber}/index.html`;

            console.log(`🔍 Checking documentation preview at: ${previewUrl}`);

            // Wait up to 30s for the preview page to exist
            async function checkPreview(url, attempts=6, delayMs=5000) {
              for (let i = 0; i < attempts; i++) {
                try {
                  const response = await fetch(url, { method: 'HEAD' });
                  if (response.ok) return true;
                } catch {}
                console.log(`⏳ Preview not ready yet (attempt ${i+1}/${attempts})`);
                await new Promise(r => setTimeout(r, delayMs));
              }
              return false;
            }

            const previewReady = await checkPreview(previewUrl);

            let previewSection = '';
            if (previewReady) {
              console.log('✅ Documentation preview is available');
              previewSection = `
            ### 📖 Documentation Preview
            - 🌐 **[📚 View Documentation Preview](${previewUrl})** ← Click to see your changes!
                        `;
                      } else {
                        console.log('⚠️ Documentation preview still not available');
                        previewSection = `
            ### 📖 Documentation Preview
            - ⏳ Documentation preview will be available shortly at: [Preview Link](${previewUrl})
                        `;
                      }

                      let comment = `
            ## ✅ Benchmark and Documentation Complete

            The automated workflow has completed successfully! 🎉

            ### ✅ Completed Tasks
            - 📊 **Benchmarks**: Core benchmark executed and results saved to your branch
            - 📚 **Documentation**: Documentation updated successfully
            - 🔄 **Integration**: All changes integrated properly
            ${previewSection}
            ### 📋 Results
            - 🎯 Benchmark results have been committed to your feature branch
            - 📄 The \`docs/src/assets/benchmark-core/data.json\` file is now part of your PR changes
            - 📚 Documentation has been regenerated with the latest benchmark data

            ### 🔗 Links
            - 📊 [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - 🌿 [View your feature branch](${context.payload.repository.html_url}/tree/${context.payload.pull_request.head.ref})

            ---
            *🤖 This notification was automatically generated*
            `;

            console.log('💬 Posting success comment to PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log('✅ Success notification posted successfully');

  workflow-summary:
    needs: [guard, benchmarks, docs]
    if: always() && needs.guard.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Final workflow summary
        run: |
          echo "📋 ==================================="
          echo "📊 WORKFLOW EXECUTION SUMMARY"
          echo "📋 ==================================="
          echo ""
          echo "🛡️  Guard Job: ✅ PASSED"
          echo "   └─ Conditions met for execution"
          echo ""
          
          if [ "${{ needs.benchmarks.result }}" == "success" ]; then
            echo "📊 Benchmarks: ✅ SUCCESS"
            echo "   └─ Core benchmark completed"
          elif [ "${{ needs.benchmarks.result }}" == "failure" ]; then
            echo "📊 Benchmarks: ❌ FAILED"
            echo "   └─ Check logs for details"
          else
            echo "📊 Benchmarks: ⏭️  SKIPPED"
          fi
          
          if [ "${{ needs.docs.result }}" == "success" ]; then
            echo "📚 Documentation: ✅ SUCCESS"
            echo "   └─ Docs updated successfully"
          elif [ "${{ needs.docs.result }}" == "failure" ]; then
            echo "📚 Documentation: ❌ FAILED"
            echo "   └─ Check logs for details"
          else
            echo "📚 Documentation: ⏭️  SKIPPED"
          fi
          
          echo ""
          echo "🔗 Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          
          overall_status="✅ SUCCESS"
          if [ "${{ needs.benchmarks.result }}" == "failure" ] || [ "${{ needs.docs.result }}" == "failure" ]; then
            overall_status="❌ FAILED"
          fi
          
          echo "🎯 Overall Status: $overall_status"
          echo "📋 ==================================="
name: Orchestrate Core Benchmark and Docs

on:
  pull_request:
    types: [labeled, synchronize, opened, reopened]

permissions:
  actions: write
  contents: write
  pull-requests: write

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      run_ubuntu: ${{ steps.check.outputs.run_ubuntu }}
      run_moonshot: ${{ steps.check.outputs.run_moonshot }}
      run_mothra: ${{ steps.check.outputs.run_mothra }}
      benchmarks_summary: ${{ steps.check.outputs.benchmarks_summary }}
    steps:
      - name: Check which benchmarks should run
        id: check
        run: |
          echo "🛡️  Guard job: Checking execution conditions..."
          
          EVENT_NAME="${{ github.event_name }}"
          echo "📋 Event type: $EVENT_NAME"
          
          # Initialize outputs
          RUN_UBUNTU="false"
          RUN_MOONSHOT="false"
          RUN_MOTHRA="false"
          BENCHMARKS_LIST=""
          
          if [[ "$EVENT_NAME" == "push" ]]; then
            # For push events to main, run no benchmarks
            echo "🚀 Push event to main branch detected"
            echo "✅ Running no benchmarks"
          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
            # For PR events, check base branch and labels
            LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
            BASE="${{ github.event.pull_request.base.ref }}"

            echo "🎯 Base branch: $BASE"
            echo "🏷️  PR labels: $LABELS"

            if [[ "$BASE" != "main" ]]; then
              echo "❌ Base branch is not 'main' - skipping benchmarks"
              echo "run_ubuntu=false" >> $GITHUB_OUTPUT
              echo "run_moonshot=false" >> $GITHUB_OUTPUT
              echo "benchmarks_summary=none" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "✅ Base branch check passed (main)"

            # Check for specific benchmark labels
            if echo "$LABELS" | grep -q "run bench core all"; then
              echo "✅ Found 'run bench core all' label"
              RUN_UBUNTU="true"
              RUN_MOONSHOT="true"
              RUN_MOTHRA="true"
              BENCHMARKS_LIST="ubuntu-latest, moonshot, mothra"
            else
              if echo "$LABELS" | grep -q "run bench core ubuntu"; then
                echo "✅ Found 'run bench core ubuntu' label"
                RUN_UBUNTU="true"
                BENCHMARKS_LIST="ubuntu-latest"
              fi
              if echo "$LABELS" | grep -q "run bench core moonshot"; then
                echo "✅ Found 'run bench core moonshot' label"
                RUN_MOONSHOT="true"
                if [ -n "$BENCHMARKS_LIST" ]; then
                  BENCHMARKS_LIST="$BENCHMARKS_LIST, moonshot"
                else
                  BENCHMARKS_LIST="moonshot"
                fi
              fi
              if echo "$LABELS" | grep -q "run bench core mothra"; then
                echo "✅ Found 'run bench core mothra' label"
                RUN_MOTHRA="true"
                if [ -n "$BENCHMARKS_LIST" ]; then
                  BENCHMARKS_LIST="$BENCHMARKS_LIST, mothra"
                else
                  BENCHMARKS_LIST="mothra"
                fi
              fi
            fi
            
            if [ "$RUN_UBUNTU" == "false" ] && [ "$RUN_MOONSHOT" == "false" ] && [ "$RUN_MOTHRA" == "false" ]; then
              echo "❌ No benchmark labels found"
              echo "ℹ️  Expected labels: 'run bench core ubuntu', 'run bench core moonshot', 'run bench core mothra', or 'run bench core all'"
              BENCHMARKS_LIST="none"
            fi
          else
            echo "❌ Unexpected event type: $EVENT_NAME"
          fi
          
          # Set outputs
          echo "run_ubuntu=$RUN_UBUNTU" >> $GITHUB_OUTPUT
          echo "run_moonshot=$RUN_MOONSHOT" >> $GITHUB_OUTPUT
          echo "run_mothra=$RUN_MOTHRA" >> $GITHUB_OUTPUT
          echo "benchmarks_summary=$BENCHMARKS_LIST" >> $GITHUB_OUTPUT

      - name: 📊 Guard decision summary
        run: |
          echo "🛡️ Guard Job Summary:"
          echo "📊 Benchmarks to run:"
          
          RUN_UBUNTU="${{ steps.check.outputs.run_ubuntu }}"
          RUN_MOONSHOT="${{ steps.check.outputs.run_moonshot }}"
          RUN_MOTHRA="${{ steps.check.outputs.run_mothra }}"
          SUMMARY="${{ steps.check.outputs.benchmarks_summary }}"
          
          if [ "$RUN_UBUNTU" == "true" ]; then
            echo "  ✅ benchmark-core-ubuntu-latest"
          fi
          if [ "$RUN_MOONSHOT" == "true" ]; then
            echo "  ✅ benchmark-core-moonshot"
          fi
          if [ "$RUN_MOTHRA" == "true" ]; then
            echo "  ✅ benchmark-core-mothra"
          fi
          if [ "$RUN_UBUNTU" != "true" ] && [ "$RUN_MOONSHOT" != "true" ] && [ "$RUN_MOTHRA" != "true" ]; then
            echo "  ⏭️  None (conditions not met)"
            echo ""
            echo "💡 To run benchmarks on PRs, ensure:"
            echo "   • PR targets 'main' branch"
            echo "   • PR has one of: 'run bench core ubuntu', 'run bench core moonshot', 'run bench core mothra', or 'run bench core all'"
          else
            echo ""
            echo "✅ Proceeding with: $SUMMARY"
          fi

  benchmark-ubuntu:
    needs: guard
    if: needs.guard.outputs.run_ubuntu == 'true'
    uses: ./.github/workflows/benchmark-core-ubuntu-latest.yml

  benchmark-moonshot:
    needs: guard
    if: needs.guard.outputs.run_moonshot == 'true'
    uses: ./.github/workflows/benchmark-core-moonshot.yml

  benchmark-mothra:
    needs: guard
    if: needs.guard.outputs.run_mothra == 'true'
    uses: ./.github/workflows/benchmark-core-mothra.yml

  docs:
    needs: [guard, benchmark-ubuntu, benchmark-moonshot, benchmark-mothra]
    if: |
      always() &&
      (needs.guard.result == 'success') &&
      (needs.benchmark-ubuntu.result != 'cancelled') &&
      (needs.benchmark-moonshot.result != 'cancelled') &&
      (needs.benchmark-mothra.result != 'cancelled') &&
      (needs.benchmark-ubuntu.result != 'failure') &&
      (needs.benchmark-moonshot.result != 'failure') &&
      (needs.benchmark-mothra.result != 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with latest changes
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes including benchmark results
        run: |
          echo "🔄 Pulling latest changes from branch..."
          git pull origin ${{ github.head_ref || github.ref_name }}
          echo "✅ Latest changes pulled"

      - uses: julia-actions/setup-julia@latest
      - uses: julia-actions/julia-buildpkg@latest

      - name: Install dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'

      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
          GKSwstype: 100
        run: |
          julia --project=docs/ -e 'ENV["GKSwstype"]="nul"; include("docs/make.jl")'

  notify-failure:
    needs: [guard, benchmark-ubuntu, benchmark-moonshot, benchmark-mothra, docs]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR with failure notification
        uses: actions/github-script@v8
        with:
          script: |
            console.log('🚨 Workflow failure detected - posting notification...');
            
            const prNumber = context.payload.pull_request.number;
            const failedJobs = [];
            
            console.log('📊 Analyzing job results...');
            if (needs['benchmark-ubuntu'] && needs['benchmark-ubuntu'].result === 'failure') {
              console.log('❌ Benchmark Ubuntu job failed');
              failedJobs.push('Benchmark Ubuntu-Latest');
            }
            if (needs['benchmark-moonshot'] && needs['benchmark-moonshot'].result === 'failure') {
              console.log('❌ Benchmark Moonshot job failed');
              failedJobs.push('Benchmark Moonshot');
            }
            if (needs['benchmark-mothra'] && needs['benchmark-mothra'].result === 'failure') {
              console.log('❌ Benchmark Mothra job failed');
              failedJobs.push('Benchmark Mothra');
            }
            if (needs.docs.result === 'failure') {
              console.log('❌ Documentation job failed');
              failedJobs.push('Documentation');
            }
            
            console.log(`📝 Failed jobs: ${failedJobs.join(', ')}`);

            const comment = `
            ## ❌ Workflow Failed
            
            The benchmark and documentation workflow encountered failures:
            
            ### Failed Jobs
            ${failedJobs.map(job => `- ❌ ${job}`).join('\n')}
            
            ### 🔍 Troubleshooting
            - Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed logs
            - Verify that all required dependencies are available
            - Ensure the benchmark code is functioning correctly
            
            ### 🔄 Next Steps
            - Fix any issues identified in the logs
            - Push new commits to retry, or
            - Remove and re-add the benchmark label to restart
            
            ---
            *🤖 This notification was automatically generated*
            `;

            console.log('💬 Posting failure comment to PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
            console.log('✅ Failure notification posted successfully');

  notify-success:
    needs: [guard, benchmark-ubuntu, benchmark-moonshot, benchmark-mothra, docs]
    if: |
      always() &&
      (needs.guard.result == 'success') &&
      (needs.docs.result == 'success') &&
      (needs.benchmark-ubuntu.result != 'cancelled') &&
      (needs.benchmark-moonshot.result != 'cancelled') &&
      (needs.benchmark-mothra.result != 'cancelled') &&
      (needs.benchmark-ubuntu.result != 'failure') &&
      (needs.benchmark-moonshot.result != 'failure') &&
      (needs.benchmark-mothra.result != 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR with success notification
        uses: actions/github-script@v8
        env:
          BENCHMARKS_SUMMARY: ${{ needs.guard.outputs.benchmarks_summary }}
        with:
          script: |
            console.log('🎉 Workflow success detected - posting notification...');

            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://control-toolbox.org/CTBenchmarks.jl/previews/PR${prNumber}/index.html`;
            const benchmarksSummary = process.env.BENCHMARKS_SUMMARY;

            console.log(`🔍 Checking documentation preview at: ${previewUrl}`);

            // Wait up to 30s for the preview page to exist
            async function checkPreview(url, attempts=6, delayMs=5000) {
              for (let i = 0; i < attempts; i++) {
                try {
                  const response = await fetch(url, { method: 'HEAD' });
                  if (response.ok) return true;
                } catch {}
                console.log(`⏳ Preview not ready yet (attempt ${i+1}/${attempts})`);
                await new Promise(r => setTimeout(r, delayMs));
              }
              return false;
            }

            const previewReady = await checkPreview(previewUrl);

            let previewSection = '';
            if (previewReady) {
              console.log('✅ Documentation preview is available');
              previewSection = `
            ### 📖 Documentation Preview
            - 🌐 **[📚 View Documentation Preview](${previewUrl})** ← Click to see your changes!
                        `;
                      } else {
                        console.log('⚠️ Documentation preview still not available');
                        previewSection = `
            ### 📖 Documentation Preview
            - ⏳ Documentation preview will be available shortly at: [Preview Link](${previewUrl})
                        `;
                      }

                      let comment = `
            ## ✅ Benchmark and Documentation Complete

            The automated workflow has completed successfully! 🎉

            ### ✅ Completed Tasks
            - 📊 **Benchmarks**: ${benchmarksSummary} executed and results saved to your branch
            - 📚 **Documentation**: Documentation updated successfully
            - 🔄 **Integration**: All changes integrated properly
            ${previewSection}
            ### 📋 Results
            - 🎯 Benchmark results have been committed to your feature branch
            - 📚 Documentation has been regenerated with the latest benchmark data

            ### 🔗 Links
            - 📊 [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - 🌿 [View your feature branch](${context.payload.repository.html_url}/tree/${context.payload.pull_request.head.ref})

            ---
            *🤖 This notification was automatically generated*
            `;

            console.log('💬 Posting success comment to PR...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log('✅ Success notification posted successfully');

  workflow-summary:
    needs: [guard, benchmark-ubuntu, benchmark-moonshot, benchmark-mothra, docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Final workflow summary
        run: |
          echo "📋 ==================================="
          echo "📊 WORKFLOW EXECUTION SUMMARY"
          echo "📋 ==================================="
          echo ""
          echo "🛡️  Guard Job: ✅ PASSED"
          echo "   └─ Benchmarks planned: ${{ needs.guard.outputs.benchmarks_summary }}"
          echo ""
          
          if [ "${{ needs.benchmark-ubuntu.result }}" == "success" ]; then
            echo "📊 Benchmark Ubuntu-Latest: ✅ SUCCESS"
          elif [ "${{ needs.benchmark-ubuntu.result }}" == "failure" ]; then
            echo "📊 Benchmark Ubuntu-Latest: ❌ FAILED"
          elif [ "${{ needs.benchmark-ubuntu.result }}" == "skipped" ]; then
            echo "📊 Benchmark Ubuntu-Latest: ⏭️  SKIPPED"
          fi
          
          if [ "${{ needs.benchmark-moonshot.result }}" == "success" ]; then
            echo "📊 Benchmark Moonshot: ✅ SUCCESS"
          elif [ "${{ needs.benchmark-moonshot.result }}" == "failure" ]; then
            echo "📊 Benchmark Moonshot: ❌ FAILED"
          elif [ "${{ needs.benchmark-moonshot.result }}" == "skipped" ]; then
            echo "📊 Benchmark Moonshot: ⏭️  SKIPPED"
          fi
          
          if [ "${{ needs.benchmark-mothra.result }}" == "success" ]; then
            echo "📊 Benchmark Mothra: ✅ SUCCESS"
          elif [ "${{ needs.benchmark-mothra.result }}" == "failure" ]; then
            echo "📊 Benchmark Mothra: ❌ FAILED"
          elif [ "${{ needs.benchmark-mothra.result }}" == "skipped" ]; then
            echo "📊 Benchmark Mothra: ⏭️  SKIPPED"
          fi
          
          if [ "${{ needs.docs.result }}" == "success" ]; then
            echo "📚 Documentation: ✅ SUCCESS"
            echo "   └─ Docs updated successfully"
          elif [ "${{ needs.docs.result }}" == "failure" ]; then
            echo "📚 Documentation: ❌ FAILED"
            echo "   └─ Check logs for details"
          else
            echo "📚 Documentation: ⏭️  SKIPPED"
          fi
          
          echo ""
          echo "🔗 Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          
          overall_status="✅ SUCCESS"
          if [ "${{ needs.benchmark-ubuntu.result }}" == "failure" ] || [ "${{ needs.benchmark-moonshot.result }}" == "failure" ] || [ "${{ needs.benchmark-mothra.result }}" == "failure" ] || [ "${{ needs.docs.result }}" == "failure" ]; then
            overall_status="❌ FAILED"
          fi
          
          echo "🎯 Overall Status: $overall_status"
          echo "📋 ==================================="
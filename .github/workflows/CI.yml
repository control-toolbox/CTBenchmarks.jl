# [.github/workflows/CI.yml]
name: CI

on:
  pull_request:
    types: [labeled, synchronize, opened, reopened]

jobs:
  guard:
    runs-on: ubuntu-latest
    outputs:
      should_run_cpu: ${{ steps.check.outputs.should_run_cpu }}
      should_run_gpu: ${{ steps.check.outputs.should_run_gpu }}
    steps:
      - name: Check if CI should run
        id: check
        shell: bash
        run: |
          echo "üõ°Ô∏è  Guard job: checking CI conditions..."
          
          EVENT_NAME="${{ github.event_name }}"
          echo "üìã Event type: $EVENT_NAME"
          
          if [[ "$EVENT_NAME" == "push" ]]; then
            echo "üöÄ Push event detected - running CPU CI only"
            echo "should_run_cpu=true" >> $GITHUB_OUTPUT
            echo "should_run_gpu=false" >> $GITHUB_OUTPUT
          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
            LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
            echo "üè∑Ô∏è  PR labels: $LABELS"
            
            # Initialize outputs
            RUN_CPU="false"
            RUN_GPU="false"
            
            # Check for specific labels
            if echo "$LABELS" | grep -Fq "run CI cpu / gpu"; then
              echo "‚úÖ Found 'run CI cpu / gpu' label"
              RUN_CPU="true"
              RUN_GPU="true"
            else
              if echo "$LABELS" | grep -Fq "run CI cpu"; then
                echo "‚úÖ Found 'run CI cpu' label"
                RUN_CPU="true"
              fi
              if echo "$LABELS" | grep -Fq "run CI gpu"; then
                echo "‚úÖ Found 'run CI gpu' label"
                RUN_GPU="true"
              fi
            fi
            
            echo "should_run_cpu=$RUN_CPU" >> $GITHUB_OUTPUT
            echo "should_run_gpu=$RUN_GPU" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Unsupported event type"
            echo "should_run_cpu=false" >> $GITHUB_OUTPUT
            echo "should_run_gpu=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Guard decision summary
        run: |
          echo "üõ°Ô∏è  Guard summary:"
          echo "CPU CI: ${{ steps.check.outputs.should_run_cpu }}"
          echo "GPU CI: ${{ steps.check.outputs.should_run_gpu }}"

  cpu-tests:
    needs: guard
    if: needs.guard.outputs.should_run_cpu == 'true'
    strategy:
      matrix:
        version:
          - '1.10'
          - '1.11'
        os:
          - ubuntu-latest
        arch:
          - x64
    uses: control-toolbox/CTActions/.github/workflows/ci.yml@main
    with:
      version: ${{ matrix.version }}
      os: ${{ matrix.os }}
      arch: ${{ matrix.arch }}

  moonshot:
    needs: guard
    if: needs.guard.outputs.should_run_gpu == 'true'
    runs-on: [self-hosted, Linux, gpu, cuda]
    strategy:
      matrix:
        os: [ubuntu-24.04]
        julia-version: ['1.11']
        julia-arch: [x64]

    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1

name: Benchmark Core

on:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  run-benchmark-core:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      # ---------------------------
      # Checkout Repository
      # ---------------------------
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📋 Repository checkout status
        run: |
          echo "✅ Repository checked out successfully"
          echo "📁 Current directory: $(pwd)"
          echo "📊 Total files: $(find . -type f | wc -l)"

      # ---------------------------
      # Setup Julia Environment
      # ---------------------------
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'

      - name: 🔧 Julia setup status
        run: |
          echo "✅ Julia $(julia --version | cut -d' ' -f3) installed successfully"
          echo "📍 Julia location: $(which julia)"

      - uses: julia-actions/cache@v2

      - name: 💾 Julia cache status
        run: echo "✅ Julia package cache configured"

      - uses: julia-actions/julia-buildpkg@v1
        with:
          ignore-no-cache: true

      - name: 🔨 Package build status
        run: |
          echo "✅ Julia package built successfully"
          echo "📦 CTBenchmarks package ready for use"

      # ---------------------------
      # Run Core Benchmark
      # ---------------------------
      - name: Run core benchmark
        id: benchmark
        timeout-minutes: 30
        run: |
          echo "🚀 Starting core benchmark execution..."
          echo "⏱️  Benchmark timeout: 30 minutes"
          
          julia --color=yes -e '
            include("scripts/benchmark-core.jl")
            out = main()
            println("📄 Output file: ", out)
            open("benchmark_output.txt", "w") do f
              write(f, string(out))
            end
            println("💾 Output path saved to benchmark_output.txt")
          '
          
          echo "✅ Benchmark execution completed"
          echo "benchmark_success=true" >> $GITHUB_OUTPUT

      - name: 📊 Benchmark results validation
        if: steps.benchmark.outputs.benchmark_success == 'true'
        run: |
          echo "🔍 Validating benchmark results..."
          
          if [ -f "benchmark_output.txt" ]; then
            OUTPUT_PATH=$(cat benchmark_output.txt)
            echo "✅ Benchmark output file found: $OUTPUT_PATH"
            
            if [ -f "$OUTPUT_PATH" ]; then
              FILE_SIZE=$(stat -f%z "$OUTPUT_PATH" 2>/dev/null || stat -c%s "$OUTPUT_PATH" 2>/dev/null || echo "unknown")
              LINE_COUNT=$(wc -l < "$OUTPUT_PATH")
              echo "✅ Benchmark JSON file created successfully"
              echo "📏 File size: $FILE_SIZE bytes"
              echo "📝 File lines: $LINE_COUNT"
              echo "📍 File location: $OUTPUT_PATH"
              
              # Show first few lines of the JSON for verification
              echo "🔎 JSON content preview:"
              head -10 "$OUTPUT_PATH"
              if [ $LINE_COUNT -gt 10 ]; then
                echo "   ... (truncated, $LINE_COUNT total lines)"
              fi
            else
              echo "❌ ERROR: Benchmark JSON file not found at $OUTPUT_PATH"
              exit 1
            fi
          else
            echo "❌ ERROR: benchmark_output.txt not found"
            exit 1
          fi

    # ---------------------------
    # Commit benchmark results to current branch
    # ---------------------------
      - name: Commit benchmark results to current branch
        if: steps.benchmark.outputs.benchmark_success == 'true'
        run: |
          echo "🔧 Configuring git user..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "✅ Git user configured"

          echo "🌿 Checking current git state..."
          echo "Current HEAD: $(git rev-parse --short HEAD)"
          echo "Current branch: $(git branch --show-current || echo 'DETACHED HEAD')"
          
          # Ensure we're on the correct branch for PR
          if [ -n "${{ github.head_ref }}" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
            echo "🔄 This is a PR, switching to branch: $BRANCH_NAME"
            git checkout -B "$BRANCH_NAME"
            echo "✅ Now on branch: $(git branch --show-current)"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            echo "🔄 This is a push, switching to branch: $BRANCH_NAME"  
            git checkout -B "$BRANCH_NAME"
            echo "✅ Now on branch: $(git branch --show-current)"
          fi

          echo "📊 Adding benchmark results to current branch..."
          
          # Add the benchmark JSON
          git add docs/src/assets/benchmark-core/data.json

          # Check if file was added
          if git diff --cached --name-only | grep -q "docs/src/assets/benchmark-core/data.json"; then
            echo "✅ docs/src/assets/benchmark-core/data.json staged for commit"
            
            # Show what's being committed
            echo "📋 Files to be committed:"
            git diff --cached --name-status
          else
            echo "⚠️  docs/src/assets/benchmark-core/data.json not staged (possibly no changes)"
          fi

          # Commit only if there are changes
          if ! git diff --cached --quiet; then
            echo "📝 Committing benchmark results to current branch..."
            git commit -m "📊 Add core benchmark results" -m "Generated by automated benchmark workflow" -m "Results saved to docs/src/assets/benchmark-core/data.json" -m "Ready for documentation generation"
            echo "✅ Benchmark results committed successfully"
            
            echo "🚀 Pushing changes to branch: $BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            echo "✅ Benchmark results pushed to $BRANCH_NAME"
          else
            echo "ℹ️  No changes detected in benchmark results"
            echo "📊 Current results are identical to previous run"
          fi

      - name: 📋 Benchmark workflow summary
        if: steps.benchmark.outputs.benchmark_success == 'true'
        run: |
          echo "📊 Benchmark workflow summary:"
          echo "✅ Benchmark execution: SUCCESS"
          echo "📁 Results saved to: docs/src/assets/benchmark-core/data.json"
          echo "🌿 Results committed to: ${{ github.head_ref || github.ref_name }} branch"
          echo "📚 Ready for documentation generation"
          echo "🎉 Core benchmark workflow completed successfully!"
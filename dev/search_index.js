var documenterSearchIndex = {"docs":
[{"location":"benchmark-minimal.html#Minimal-benchmark","page":"Minimal benchmark","title":"Minimal benchmark","text":"","category":"section"},{"location":"benchmark-minimal.html","page":"Minimal benchmark","title":"Minimal benchmark","text":"This page attempts to read the minimal benchmark results from docs/assets/benchmark-minimal/data.json at the root of the repository. If the file is not present (e.g., benchmarks were not run yet), a message will be displayed.","category":"page"},{"location":"benchmark-minimal.html#Experiment-setup","page":"Minimal benchmark","title":"Experiment setup","text":"","category":"section"},{"location":"benchmark-minimal.html","page":"Minimal benchmark","title":"Minimal benchmark","text":"if bench_data === nothing\n    println(\"No benchmark file found at: $_BENCH_PATH\")\nelse\n    meta = get(bench_data, \"metadata\", Dict())\n    println(\"Timestamp: \", get(meta, \"timestamp\", \"n/a\"))\n    println(\"Julia version: \", get(meta, \"julia_version\", \"n/a\"))\n    println(\"OS: \", get(meta, \"os\", \"n/a\"))\n    println(\"Machine: \", get(meta, \"machine\", \"n/a\"))\nend\nnothing # hide","category":"page"},{"location":"benchmark-minimal.html#Results","page":"Minimal benchmark","title":"Results","text":"","category":"section"},{"location":"benchmark-minimal.html","page":"Minimal benchmark","title":"Minimal benchmark","text":"if bench_data === nothing\n    println(\"No results to display because the benchmark file is missing.\")\nelse\n    rows = get(bench_data, \"results\", Any[])\n    if isempty(rows)\n        println(\"No results recorded in the benchmark file.\")\n    else\n        # Transform into a DataFrame\n        df = DataFrame(\n            problem = String[],\n            time = Float64[],\n        )\n        for r in rows\n            push!(df, (get(r, \"problem\", \"\"), parse(Float64, string(get(r, \"time\", NaN)))))\n        end\n        println(df)\n    end\nend\nnothing # hide","category":"page"},{"location":"index.html#CTBenchmarks","page":"Introduction","title":"CTBenchmarks","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Documentation for CTBenchmarks.","category":"page"},{"location":"index.html#Environment-snapshots-(doc-build-environment)","page":"Introduction","title":"Environment snapshots (doc build environment)","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>The documentation of this package was built using these direct dependencies,</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"</details>","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/control-toolbox/\" *\n                name *\n                \".jl/tree/gh-pages/v\" *\n                version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/control-toolbox/\" *\n               name *\n               \".jl/tree/gh-pages/v\" *\n               version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"}]
}
